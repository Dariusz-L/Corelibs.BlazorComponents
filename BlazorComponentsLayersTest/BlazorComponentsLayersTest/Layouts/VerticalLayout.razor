@using BlazorComponentsLayersTest.Extensions
@inherits BaseLayout
@implements ILayoutElement

<div class="vertical-layout" style=@Style>
    <CascadingValue Value=@_children>
        @ChildContent
    </CascadingValue>
</div>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Parameter] public CssAttribute? Background { get; set; } //= GetRandomColor();

    [Parameter] public CssAttribute? Padding { get; set; }
    [Parameter] public CssAttribute? PaddingLeft { get; set; }
    [Parameter] public CssAttribute? PaddingRight { get; set; }

    [Parameter] public CssAttribute? Gap { get; set; }

    [Parameter] public CssAttributeExt ChildWidth { get; set; }
    [Parameter] public CssAttributeExt ChildMinWidth { get; set; }
    [Parameter] public CssAttributeExt ChildMaxWidth { get; set; }

    [Parameter] public CssAttributeExt ChildHeigth { get; set; }
    [Parameter] public CssAttributeExt ChildMinHeigth { get; set; }
    [Parameter] public CssAttributeExt ChildMaxHeigth { get; set; }

    // Layout Element
    [CascadingParameter] public ILayoutElementsContainerAdd Container { get; set; }

    [Parameter] public CssAttribute? Width      { get; set; }
    [Parameter] public CssAttribute? MinWidth   { get; set; }
    [Parameter] public CssAttribute? MaxWidth   { get; set; }

    [Parameter] public CssAttribute? Height     { get; set; }
    [Parameter] public CssAttribute? MinHeight  { get; set; }
    [Parameter] public CssAttribute? MaxHeight  { get; set; }

    protected override void OnInitialized()
    {
        Container?.Add(this);
        if (ChildContent == null)
        {
            Height = 0;
            Padding = 0;
        }
    }

    public Task RefreshView() => InvokeAsync(StateHasChanged);

    private LayoutElementsContainer _children = new LayoutElementsContainer();

    protected override void OnAfterRender(bool firstRender)
    {
        foreach (var child in _children.Elements)
        {
            if (!NullableExtensions.HasAnyValue(
                    ChildWidth, ChildMinWidth, ChildMaxWidth,
                    ChildHeigth, ChildMinHeigth, ChildMaxHeigth))
                continue;

            child.Width = ChildWidth;
            child.MinWidth = ChildMinWidth;
            child.MaxWidth = ChildMaxWidth;

            child.Height = ChildHeigth;
            child.MinHeight = ChildMinHeigth;
            child.MaxHeight = ChildMaxHeigth;

            child.RefreshView();
        }

        bool any = false;
        _children.Elements.ForEach(e =>
        {
            if (e.ChildContent == null)
            {
                any = true;
                e.Height = 0;
                e.Padding = 0;
                e.RefreshView();
            }
        });

        if (any && firstRender)
            RefreshView();

    }

    private static string GetRandomColor()
    {
        var random = new Random();
        return String.Format("#{0:X6}", random.Next(0x1000000));
    }
}
