@using Microsoft.AspNetCore.Components.Rendering;
@using Common.Basic.Collections
@inherits BaseLayout

<div style=@Style>
    <div class="tree-layout">
        @{treeNodeCount = Tree.Flatten(n => n.Children).Count();}
        @GetTreeRenderFragment(Tree)
        @GetParentStyle()
        @{seq = 0;}
    </div>
</div>

@code {

    [Parameter] public TreeNode? Tree { get; set; }

    [Parameter] public CssAttribute? Padding { get; set; }
    [Parameter] public CssAttribute? PaddingLeft { get; set; }

    [Parameter] public double? LayoutGap { get; set; }

    int seq;
    int zIndex = 0;
    int curTreeNodeIndex;
    private RenderFragment GetTreeRenderFragment(TreeNode node)
    {
        if (node == null)
            return builder => {};

        var childrenFragments = node.Children!.Select(GetTreeRenderFragment).ToList();

        return builder =>
        {
            builder.OpenComponent<VerticalLayout>(seq++);
            builder.AddAttribute(seq++, "ZIndex", new CssAttribute(zIndex));
            builder.AddAttribute(seq++, "Height", new CssAttribute("fit-content"));
            builder.AddAttribute(seq++, "Padding", new CssAttribute(20));
            if (LayoutGap.HasValue)
                builder.AddAttribute(seq++, "Gap", new CssAttribute(LayoutGap.Value));
            builder.AddAttribute(seq++, "class", $"highlight-{curTreeNodeIndex++}");
            RenderFragment childContentFragment = (RenderTreeBuilder b) =>
            {
                b.AddContent(seq++, node.Content);
                for (int i = 0; i < childrenFragments.Count; i++)
                    b.AddContent(seq++, childrenFragments[i]);
            };
            builder.AddAttribute(seq++, "ChildContent", childContentFragment);
            builder.CloseComponent();
        };
    }

    int treeNodeCount;
    private RenderFragment GetParentStyle()
    {
        return b =>
        {
            b.OpenElement(seq++, "style");
            {
                for (int i = 0; i < treeNodeCount; i++)
                {
                    var notString = "";

                    for (int j = i + 1; i < treeNodeCount; j++)
                    {
                        if (j >= treeNodeCount)
                            break;
                        notString += $":not(:has(.highlight-{j}:hover))";
                    }

                    b.AddContent(seq++, ".highlight-" + i + ":hover" + notString + "{");
                    //b.AddContent(seq++, "background: #f1f1f1 !important;");
                    //b.AddContent(seq++, "opacity: 70% !important;");
                    b.AddContent(seq++, "outline: solid 1px;");
                    b.AddContent(seq++, "}");
                }
            }
            b.CloseElement();
        };
    }

    public class TreeNode
    {
        public RenderFragment? Content { get; set; }
        public List<TreeNode>? Children { get; set; }
    }
}
