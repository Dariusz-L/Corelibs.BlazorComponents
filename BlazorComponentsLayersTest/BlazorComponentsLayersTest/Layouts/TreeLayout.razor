@using BlazorComponentsLayersTest.ViewModels;
@using Microsoft.AspNetCore.Components.Rendering;
@using Common.Basic.Collections
@inherits BaseElement

<div class="tree-layout-container" style=@Style>
    <div class="tree-layout">
        @{treeNodeCount = Tree.Flatten(n => n.Children).Count();}
        @GetTreeRenderFragment(Tree)
        @GetParentStyle()
        @{seq = 0;}
    </div>
</div>

@code {
    [Parameter] public TreeNode? Tree { get; set; }
    [Parameter] public Func<string, Task<bool>> BeforeExpand { get; set; }
    [Parameter] public Func<string, Task> AfterExpand { get; set; }

    [Parameter] public CssAttribute? Padding { get; set; }
    [Parameter] public CssAttribute? PaddingLeft { get; set; }

    [Parameter] public double? LayoutGap { get; set; }

    int seq;
    int zIndex = 0;
    int curTreeNodeIndex;
    private RenderFragment GetTreeRenderFragment(TreeNode node)
    {
        if (node == null)
            return builder => {};

        var childrenFragments = new List<RenderFragment>();
        if (node.IsExpanded)
            childrenFragments = node.Children!.Select(GetTreeRenderFragment).ToList();

        return builder =>
        {
            builder.OpenComponent<VerticalLayout>(seq++);
            {
                builder.AddAttribute(seq++, "ZIndex", new CssAttribute(zIndex));
                builder.AddAttribute(seq++, "Height", new CssAttribute("fit-content"));
                builder.AddAttribute(seq++, "Padding", new CssAttribute(20));
                if (LayoutGap.HasValue)
                    builder.AddAttribute(seq++, "Gap", new CssAttribute(LayoutGap.Value));
                builder.AddAttribute(seq++, "class", $"highlight-{curTreeNodeIndex++}");

                RenderFragment childContentFragment = (RenderTreeBuilder b) =>
                {
                    b.OpenElement(seq++, "button");
                    {
                        b.AddAttribute(seq++, "class", "expand-button");
                        b.AddAttribute(seq++, "onclick", () => SwitchExpand(node));
                        b.OpenElement(seq++, "img");
                        {
                            b.AddAttribute(seq++, "class", "expand-icon");
                            if (node.HasChildren || node.Children.Count > 0)
                                b.AddAttribute(seq++, "src", node.IsExpanded ? "/icons/chevron-down.png" : "/icons/chevron-right.png");
                        }
                        b.CloseElement();
                    }
                    b.CloseElement();

                    b.AddContent(seq++, node.Content);
                    for (int i = 0; i < childrenFragments.Count; i++)
                        b.AddContent(seq++, childrenFragments[i]);
                };

                builder.AddAttribute(seq++, "ChildContent", childContentFragment);
            }
            builder.CloseComponent();
        };
    }

    private async Task SwitchExpand(TreeNode node)
    {
        if (BeforeExpand == null)
            return;

        var result = await BeforeExpand.Invoke(node.Identity.ID);
        if (!result)
            return;

        node.IsExpanded = !node.IsExpanded;
        await InvokeAsync(StateHasChanged);

        await AfterExpand.Invoke(node.Identity.ID);
    }

    int treeNodeCount;
    private RenderFragment GetParentStyle()
    {
        return b =>
        {
            b.OpenElement(seq++, "style");
            {
                for (int i = 0; i < treeNodeCount; i++)
                {
                    var notString = "";

                    for (int j = i + 1; i < treeNodeCount; j++)
                    {
                        if (j >= treeNodeCount)
                            break;
                        notString += $":not(:has(.highlight-{j}:hover))";
                    }

                    b.AddContent(seq++, ".highlight-" + i + ":hover" + notString + "{");
                    //b.AddContent(seq++, "background: #f1f1f1 !important;");
                    //b.AddContent(seq++, "opacity: 70% !important;");
                    b.AddContent(seq++, "outline: solid 1px;");
                    b.AddContent(seq++, "}");
                }
            }
            b.CloseElement();
        };
    }

    public class TreeNode
    {
        public IdentityVM Identity { get; set; } = new();
        public RenderFragment? Content { get; set; }
        public List<TreeNode>? Children { get; set; } = new();
        public bool IsExpanded { get; set; } = false;
        public bool HasChildren { get; set; }
    }
}
