@using BlazorComponentsLayersTest.ViewModels;

<OuterClickComponent @ref=@OuterClickComponent>
    <ToolWindow>
        <VerticalLayout Height=@("fit-content")>
            @foreach (var mod in _modifications)
            {
                if (mod is OrderModification.ViewModel orderVM)
                {
                    <OrderModification VM=orderVM />
                    continue;
                }

                if (mod is SortModification.ViewModel sortVM)
                {
                    <SortModification VM=sortVM />
                    continue;
                }
            }

        </VerticalLayout>
        <div class="add-button-parent">
            <button class="add-button">Add New Mod</button>
            <div class="add-panel">
                <button @onclick=@AddOrderModification>Order</button>
                <button @onclick=@AddSortModification>Sort</button>
                <button>Filter</button>
                <button>Paginate</button>
                <button>Group</button>
            </div>
        </div>
    </ToolWindow>
</OuterClickComponent>

@code {
    [Parameter] public List<IdentityVM> Properties { get; set; } = new();

    public OuterClickComponent? OuterClickComponent { get; private set; }

    private List<object> _modifications = new();

    private void AddOrderModification()
    {
        _modifications.Add(new OrderModification.ViewModel() { Properties = Properties });
        InvokeAsync(StateHasChanged);
    }

    private void AddSortModification()
    {
        _modifications.Add(new SortModification.ViewModel());
        InvokeAsync(StateHasChanged);
    }

    class FilterModification
    {
        public FilterMethod Method { get; init; }

        public enum FilterMethod
        {
            Substring,
            StartsWith,
            EndsWith,
        }
    }

    class PaginateModification
    {
        public PaginateMethod Method { get; init; }

        public enum PaginateMethod
        {
            ByQuantityPerGroup,
            ByGroupCount,
            ByInitialCharacter
        }
    }

    class GroupModification
    {
        public GroupMethod Method { get; init; }

        public enum GroupMethod
        {
            ByQuantityPerGroup,
            ByGroupCount,
            ByInitialCharacter
        }
    }

    class ReverseModification
    {
    }
}
