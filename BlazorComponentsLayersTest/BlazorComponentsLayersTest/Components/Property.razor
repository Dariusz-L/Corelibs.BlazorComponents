@using Corelibs.BlazorShared.UI;

@inherits BaseElement

<div class="property-container" style=@Style @onclick="HandleClick" @oncontextmenu="HandleRightClick" @oncontextmenu:preventDefault="true">
    <div class="property">
        @*<div class="property-highlight"/>*@
        @*<SignatureAndName Text1=@Text1 Text2=@Text2 />*@
        @*<HoverableMenu Title="S" VM=_menuVM OnClick=OnMenuButtonClick MenuButtonCSS="property-menu-button" />*@
        <PropertyMenu @ref=_menu />
        @*<ul class="side-menu">
            <input type="checkbox" class="select-checkbox" />
        </ul>*@
        @foreach (var artifact in Model.Artifacts)
        {
            <CText FontSize=@artifact.VisualInfo.Font.FontSize>@artifact.Identity.Name</CText>
        }
    </div>
</div>

@code {
    [Parameter] public string Text1 { get; set; }
    [Parameter] public string Text2 { get; set; }
    [Parameter] public string ID { get; set; }

    [Parameter] public CssAttribute? Width { get; set; }
    [Parameter] public CssAttribute? MinWidth { get; set; }
    [Parameter] public CssAttribute? MaxWidth { get; set; }

    [Parameter] public CssAttribute? Height { get; set; }
    [Parameter] public CssAttribute? MinHeight { get; set; }
    [Parameter] public CssAttribute? MaxHeight { get; set; }

    [Parameter] public ViewModel Model { get; set; } = new();

    [Inject] private IJSRuntime _jsRuntime { get; set; }

    private PropertyMenu? _menu;

    private Task<bool> OnMenuButtonClick(HoverableMenu.ButtonVM vm)
    {
        return Task.FromResult(true);
    }

    void HandleClick(MouseEventArgs args)
    {
        Console.WriteLine("This is a left click");
    }

    private async Task HandleRightClick(MouseEventArgs args)
    {
        //var menuRect = await _jsRuntime.GetRect("property-menu-outer");
        //var siteRect = await _jsRuntime.GetRect("app");

        var x = args.ClientX;
        var y = args.ClientY;

        //if (x + menuRect.Width > siteRect.Width)
        //{
        //    x = siteRect.Width - menuRect.Width;
        //}
        //if (y + menuRect.Height > siteRect.Height)
        //{
        //    y = siteRect.Height - menuRect.Height;
        //}

        await _jsRuntime.InvokeVoidAsync("setPosition", _menu.ContextMenu!.ElementReference, x, y);

        _menu.OuterClick.Enabled = !_menu.OuterClick.Enabled;
        await InvokeAsync(StateHasChanged);
    }

    private HoverableMenu.MenuVM _menuVM = new()
    {
        Buttons = new()
        {
            new("Create"),
            new("Archive"),
            new("Move Up"),
            new("Move Down"),
            new("Move To Index"),
        }
    };

    public class ViewModel
    {
        public Layout Layout { get; set; }
        public List<ArtifactVM> Artifacts { get; set; } = new();
    }

    public class Layout
    {
        public LayoutType Type { get; set; }
        public float Gap { get; set; }
    }

    public class ArtifactVM
    {
        public IdentityVM Identity { get; set; }
        public VisualInfoVM VisualInfo { get; set; } = new();
    }

    public class VisualInfoVM
    {
        public bool Visible { get; set; }
        public FontVM Font { get; set; } = new();
    }

    public class FontVM
    {
        public string FontID { get; init; }
        public float FontSize { get; init; } = 12;
        public FontWeightType FontWeightType { get; init; }
    }

    public class IdentityVM
    {
        public string ID { get; init; }
        public string Name { get; init; }
    }

    public enum FontWeightType
    {
        Thin, 
        ExtraLight,
        Light,

        Normal,

        Medium,
        SemiBold,
        Bold,
        ExtraBold
    }

    public enum LayoutType
    {
        Vertical,
        Horizontal
    }
}
