@using BlazorComponentsLayersTest.ViewModels;
@using System.Drawing;
@using Common.Basic.Collections;
@using Corelibs.Basic.Colors;
@using Microsoft.AspNetCore.Components.Rendering;
@using static BlazorComponentsLayersTest.Layouts.TreeLayout;

<div class="page">
    <PageMenu OnArrangmentsButton=@OnArrangmentsButton />
    <PageHeader Model=@PageHeaderVM />
    <TreeLayout @ref=_treeLayout Tree=_treeNode BeforeExpand=BeforeExpand AfterExpand=AfterExpand ModifyNode=ModifyNode LayoutGap=20 />
    <Arrangements @ref=@_arrangements OnAddNewClick=@OnAddNewArrangmentClick />
    <Arrangements_AddNew @ref=@_arrangements_AddNew Properties=_properties />
</div>

@code {
    [Parameter]
    public BlazorComponentsLayersTest.Queries.GetPageQueryOut? Model { get; set; } = BlazorComponentsLayersTest.Queries.TestQueries.Query;

    private PageTree.App.Entities.Styles.Style _style => Model!.PageVM.StyleOfPage!;

    private Arrangements? _arrangements;
    private Arrangements_AddNew? _arrangements_AddNew;
    private TreeLayout? _treeLayout;

    private List<IdentityVM> _properties = new();

    private TreeNode? _treeNode;
    protected override void OnInitialized()
    {
        _treeNode = GetTreeNode();
        _properties = _treeNode.Children.Select(n => n.Identity).ToList();
    }

    private void OnArrangmentsButton()
    {
        _arrangements.OuterClick.Enabled = !_arrangements.OuterClick.Enabled;
    }

    private void OnAddNewArrangmentClick()
    {
        _arrangements.OuterClick.Enabled = !_arrangements.OuterClick.Enabled;
        _arrangements_AddNew.OuterClick.Enabled = !_arrangements_AddNew.OuterClick.Enabled;
    }

    private Task<bool> BeforeExpand(string id)
    {
        return Task.FromResult(true);
    }

    private Task AfterExpand(string id) => InvokeAsync(StateHasChanged);

    private static TreeNode.GetContentDelegate GetProperty(
        BlazorComponentsLayersTest.Queries.PropertyVM propertyVM,
        int propertyIndex,
        PageTree.App.Entities.Styles.StyleOfRootProperty parentStyle,
        PageTree.App.Entities.Styles.StyleOfChildProperty childStyle,
        PageTree.App.Entities.Styles.Style[] signatureOrPageStyles)
    {
        return GetContent;
        RenderFragment GetContent(TreeNode node, ref int seq)
        {
            int seqLocal = seq;
            seq += 4;

            var style = node.Data as StyleVM;

            return RenderFragmentExtensions.CreateComponent<Property>(builder =>
            {
                var vmModel = GetPropertyViewModel(propertyVM, parentStyle, childStyle, propertyIndex, propertyVM.PropertyType);
                // override main by signature or page style

                builder.AddAttribute(seqLocal++, "Model", vmModel);
            });
        };
    }

    private static Property.ViewModel GetPropertyViewModel(
        BlazorComponentsLayersTest.Queries.PropertyVM propertyVM,
        PageTree.App.Entities.Styles.StyleOfRootProperty parentStyle,
        PageTree.App.Entities.Styles.StyleOfChildProperty childStyle,
        int propertyIndex,
        PageTree.App.Entities.Styles.PropertyType propertyType)
    {
        var vmModel = new Property.ViewModel();

        if (parentStyle.ChildrenStyle == null)
        {
            if (propertyVM.SignatureIdentity != null)
                vmModel.Artifacts.Add(new()
                    { Identity = new() { ID = propertyVM.SignatureIdentity.ID, Name = propertyVM.SignatureIdentity.Name } });

            vmModel.Artifacts.Add(new() 
                { Identity = new() { ID = propertyVM.Identity.ID, Name = propertyVM.Identity.Name } });
        }

        // apply from child style?

        return vmModel;
    }

    private void ModifyNode(RenderTreeBuilder builder, TreeNode node, ref int sequence)
    {
        if (node.Parent != null)
        {
            builder
                .AddCssAttribute(ref sequence, "Padding", 16)
                .AddCssAttribute(ref sequence, "PaddingLeft", 16);
        }

        var style = node.Data as StyleVM;
        if (style == null)
            return;

        builder
            .AddCssAttribute(ref sequence, "BorderRadius", style.Borders.Radius)
            .AddCssAttribute(ref sequence, "Background", style.BackgroundColor.Default.ToRgbaString());
    }

    public static PageHeader.ViewModel PageHeaderVM = new()
    {
        Artifacts = new()
        {
            new()
            {
                Text = "Author",
                Font = new()
                {
                    FontSize = 16,
                }
            },
            new()
            {
                Text = "Misa Ammo",
                Font = new()
                {
                    FontSize = 24,
                }
            }
        }
    };

    private TreeNode GetTreeNode()
    {
        return new()
            {
                CanExpand = false,
                IsExpanded = true,
                Children = new()
            {
                new()
                {
                    Identity = new(Model!.PageVM.Identity.ID, Model!.PageVM.Identity.Name),
                    GetContent = GetProperty(
                        new Queries.PropertyVM()
                        {
                            Identity = Model.PageVM.Identity,
                            SignatureIdentity = Model.PageVM.SignatureIdentity,
                        },
                        0,
                        null,
                        null,
                        null
                    ),
                    Children = GetTreeNodes(Model.PageVM.Properties, Model.PageVM.StyleOfPage.RootProperty, Model.PageVM.StylesOfChildren)
                }
            }
        };
    }

    private List<TreeNode> GetTreeNodes(
        Queries.PropertyVM[] propertyVMs, 
        PageTree.App.Entities.Styles.StyleOfRootProperty parentStyle,
        PageTree.App.Entities.Styles.Style[] signatureOrPageStyles)
    {
        var list = new List<TreeNode>();

        propertyVMs.ForEach((propertyVM, i) =>
        {
            var styleOfIndex = parentStyle.Children.FirstOrDefault(c => c.StyleType == PageTree.App.Entities.Styles.ApplyStyleBy.Index && c.ChildIndex == i);
            var styleOfType = parentStyle.Children.FirstOrDefault(c => c.StyleType == PageTree.App.Entities.Styles.ApplyStyleBy.PropertyType && propertyVM.PropertyType == c.PropertyType);
            var childStyle = styleOfType ?? styleOfIndex;

            list.Add(new()
            {
                Identity = new() { ID = propertyVM.Identity.ID, Name= propertyVM.Identity.Name },
                CanExpand = propertyVM.CanExpand,
                HasChildren = propertyVM.HasChildren,
                LayoutType = (BlazorComponentsLayersTest.ViewModels.LayoutType) parentStyle.LayoutOfChildren.Type,
                Children = GetTreeNodes(propertyVM.Properties, childStyle, signatureOrPageStyles),
                GetContent = GetProperty(propertyVM, i, parentStyle, childStyle, signatureOrPageStyles)
            });
        });

        return list;
    }

    private readonly static Color BackgroundColor = Color.FromArgb(255, 225, 228, 228);
}
