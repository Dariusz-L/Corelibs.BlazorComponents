@using BlazorComponentsLayersTest.ViewModels;
@using static BlazorComponentsLayersTest.Layouts.TreeLayout;

<div class="page">
    <GridLayout>
        <span>N1</span>
        <span>N2</span>
        <span>N3</span>
        <span>N4</span>
        <span>N5</span>
    </GridLayout>
    <PageMenu OnArrangmentsButton=@OnArrangmentsButton />
    <TreeLayout @ref=_treeLayout Tree=Tree BeforeExpand=BeforeExpand AfterExpand=AfterExpand LayoutGap=20 />
    <Arrangements @ref=@_arrangements OnAddNewClick=@OnAddNewArrangmentClick />
    <Arrangements_AddNew @ref=@_arrangements_AddNew Properties=_properties />
</div>

@code {
    private Arrangements? _arrangements;
    private Arrangements_AddNew? _arrangements_AddNew;
    private TreeLayout? _treeLayout;

    private List<IdentityVM> _properties = new();

    protected override void OnInitialized()
    {
        _properties = Tree.Children.Select(n => n.Identity).ToList();
    }

    private void OnArrangmentsButton()
    {
        _arrangements.OuterClick.Enabled = !_arrangements.OuterClick.Enabled;
    }

    private void OnAddNewArrangmentClick()
    {
        _arrangements.OuterClick.Enabled = !_arrangements.OuterClick.Enabled;
        _arrangements_AddNew.OuterClick.Enabled = !_arrangements_AddNew.OuterClick.Enabled;
    }

    private Task<bool> BeforeExpand(string id)
    {
        return Task.FromResult(true);
    }

    private Task AfterExpand(string id) => InvokeAsync(StateHasChanged);

    public static TreeNode? Tree = new TreeNode
    {
        Content = RenderFragmentExtensions.CreateComponent<Property>("Author", "Misa Ammo"),
        Children = new List<TreeNode>
        {
            new TreeNode
            {
                Identity = new IdentityVM("LessonsID", "Lessons"),
                Content = RenderFragmentExtensions.CreateComponent<Property>("Lessons"),
                Children = new List<TreeNode>
                {
                    new TreeNode
                    {
                        Content = RenderFragmentExtensions.CreateComponent<Property>("Lesson", "wa nad ga particles"),
                        Children = new List<TreeNode>
                        {

                        }
                    },
                    new TreeNode
                    {
                        Content = RenderFragmentExtensions.CreateComponent<Property>("Lesson", "tara and nara"),
                        Children = new List<TreeNode>
                        {

                        }
                    },
                    new TreeNode
                    {
                        Content = RenderFragmentExtensions.CreateComponent<Property>("Lesson", "Basic expressions"),
                        Children = new List<TreeNode>
                        {

                        }
                    },
                }
            },

            new TreeNode
            {
                LayoutType = LayoutType.Grid,
                Identity = new IdentityVM("WordsID", "Words"),
                Content = RenderFragmentExtensions.CreateComponent<Property>("Words", "Words"),
                Children = new List<TreeNode>
                {
                    new TreeNode
                    {
                        CanExpand = false,
                        Content = RenderFragmentExtensions.CreateComponent<Property>(("Width", new CssAttribute(200)), "Lesson", "Word"),
                    },
                    new TreeNode
                    {
                        CanExpand = false,
                        Content = RenderFragmentExtensions.CreateComponent<Property>(("Width", new CssAttribute(200)), "Lesson", "Word"),
                    },
                }
            },

            new TreeNode
            {
                LayoutType = LayoutType.Grid,
                Identity = new IdentityVM("CharactersID", "Characters"),
                Content = RenderFragmentExtensions.CreateComponent<Property>("Characters", "Characters"),
                Children = Enumerable.Range(97, 23).Select(i => new TreeNode
                {
                    CanExpand = false,
                    Content = RenderFragmentExtensions.CreateComponent<Property>(("Width", new CssAttribute("20px")), "", ((char) i).ToString()),
                })
                .ToList()
            },

            new TreeNode
            {
                Content = RenderFragmentExtensions.CreateComponent<Property>("CharactersID", "Characters"),
                Identity = new IdentityVM("ThirdID", "Sup!"),
            },
        }
    };
}
